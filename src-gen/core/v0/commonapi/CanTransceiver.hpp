/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.2.0.v202012010850.
* Used org.franca.core 0.13.1.201807231814.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V0_COMMONAPI_CAN_TRANSCEIVER_HPP_
#define V0_COMMONAPI_CAN_TRANSCEIVER_HPP_




#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#define HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <CommonAPI/Types.hpp>
#include <cstdint>

#if defined (HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE)
#undef COMMONAPI_INTERNAL_COMPILATION
#undef HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif

namespace v0 {
namespace commonapi {

class CanTransceiver {
public:
    virtual ~CanTransceiver() { }

    static inline const char* getInterface();
    static inline CommonAPI::Version getInterfaceVersion();
    struct SonarArrayStruct : CommonAPI::Struct< uint32_t, uint32_t> {
    
        SonarArrayStruct()
        {
            std::get< 0>(values_) = 0ul;
            std::get< 1>(values_) = 0ul;
        }
        SonarArrayStruct(const uint32_t &_sonarFront, const uint32_t &_sonarRear)
        {
            std::get< 0>(values_) = _sonarFront;
            std::get< 1>(values_) = _sonarRear;
        }
        inline const uint32_t &getSonarFront() const { return std::get< 0>(values_); }
        inline void setSonarFront(const uint32_t &_value) { std::get< 0>(values_) = _value; }
        inline const uint32_t &getSonarRear() const { return std::get< 1>(values_); }
        inline void setSonarRear(const uint32_t &_value) { std::get< 1>(values_) = _value; }
        inline bool operator==(const SonarArrayStruct& _other) const {
        return (getSonarFront() == _other.getSonarFront() && getSonarRear() == _other.getSonarRear());
        }
        inline bool operator!=(const SonarArrayStruct &_other) const {
            return !((*this) == _other);
        }
    
    };
};

const char* CanTransceiver::getInterface() {
    return ("commonapi.CanTransceiver:v0_1");
}

CommonAPI::Version CanTransceiver::getInterfaceVersion() {
    return CommonAPI::Version(0, 1);
}


} // namespace commonapi
} // namespace v0

namespace CommonAPI {
}


// Compatibility
namespace v0_1 = v0;

#endif // V0_COMMONAPI_CAN_TRANSCEIVER_HPP_
