/*
 * This file was generated by the CommonAPI Generators.
 * Used org.genivi.commonapi.someip 3.2.14.v202310241606.
 * Used org.franca.core 0.13.1.201807231814.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
 * If a copy of the MPL was not distributed with this file, You can obtain one at
 * http://mozilla.org/MPL/2.0/.
 */
#ifndef V0_COMMONAPI_CAR_CONTROL_SOMEIP_STUB_ADAPTER_HPP_
#define V0_COMMONAPI_CAR_CONTROL_SOMEIP_STUB_ADAPTER_HPP_

#include <v0/commonapi/CarControlStub.hpp>
#include <v0/commonapi/CarControlSomeIPDeployment.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#define HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif

#include <CommonAPI/SomeIP/AddressTranslator.hpp>
#include <CommonAPI/SomeIP/StubAdapterHelper.hpp>
#include <CommonAPI/SomeIP/StubAdapter.hpp>
#include <CommonAPI/SomeIP/Factory.hpp>
#include <CommonAPI/SomeIP/Types.hpp>
#include <CommonAPI/SomeIP/Constants.hpp>

#if defined (HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE)
#undef COMMONAPI_INTERNAL_COMPILATION
#undef HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif

namespace v0 {
namespace commonapi {

template <typename _Stub = ::v0::commonapi::CarControlStub, typename... _Stubs>
class CarControlSomeIPStubAdapterInternal
    : public virtual CarControlStubAdapter,
      public CommonAPI::SomeIP::StubAdapterHelper< _Stub, _Stubs...>,
      public std::enable_shared_from_this< CarControlSomeIPStubAdapterInternal<_Stub, _Stubs...>>
{
public:
    typedef CommonAPI::SomeIP::StubAdapterHelper< _Stub, _Stubs...> CarControlSomeIPStubAdapterHelper;

    ~CarControlSomeIPStubAdapterInternal() {
        deactivateManagedInstances();
        CarControlSomeIPStubAdapterHelper::deinit();
    }

    void fireIndicatorAttributeChanged(const std::string &_value);
    
    void fireGearAttributeChanged(const std::string &_value);
    
    void deactivateManagedInstances() {}
    
    CommonAPI::SomeIP::GetAttributeStubDispatcher<
        ::v0::commonapi::CarControlStub,
        CommonAPI::Version
    > getCarControlInterfaceVersionStubDispatcher;

    CommonAPI::SomeIP::GetAttributeStubDispatcher<
        ::v0::commonapi::CarControlStub,
        std::string,
        CommonAPI::SomeIP::StringDeployment
    > getIndicatorAttributeStubDispatcher;
    
    CommonAPI::SomeIP::GetAttributeStubDispatcher<
        ::v0::commonapi::CarControlStub,
        std::string,
        CommonAPI::SomeIP::StringDeployment
    > getGearAttributeStubDispatcher;
    
    CommonAPI::SomeIP::MethodWithReplyStubDispatcher<
        ::v0::commonapi::CarControlStub,
        std::tuple< std::string>,
        std::tuple< bool>,
        std::tuple< CommonAPI::SomeIP::StringDeployment>,
        std::tuple< CommonAPI::EmptyDeployment>
    > gearSelectionHeadUnitStubDispatcher;
    
    CarControlSomeIPStubAdapterInternal(
        const CommonAPI::SomeIP::Address &_address,
        const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection,
        const std::shared_ptr<CommonAPI::StubBase> &_stub):
        CommonAPI::SomeIP::StubAdapter(_address, _connection),
        CarControlSomeIPStubAdapterHelper(
            _address,
            _connection,
            std::dynamic_pointer_cast< CarControlStub>(_stub)),
        getCarControlInterfaceVersionStubDispatcher(&CarControlStub::lockInterfaceVersionAttribute, &CarControlStub::getInterfaceVersion, false, true),
        getIndicatorAttributeStubDispatcher(
            &::v0::commonapi::CarControlStub::lockIndicatorAttribute,
            &::v0::commonapi::CarControlStub::getIndicatorAttribute,
            false,
            _stub->hasElement(0))
        ,
        getGearAttributeStubDispatcher(
            &::v0::commonapi::CarControlStub::lockGearAttribute,
            &::v0::commonapi::CarControlStub::getGearAttribute,
            false,
            _stub->hasElement(1))
        ,
        gearSelectionHeadUnitStubDispatcher(
            &CarControlStub::gearSelectionHeadUnit,
            false,
            _stub->hasElement(2),
            std::make_tuple(&::v0::commonapi::CarControl_::gearSelectionHeadUnit_selectedGearDeployment),
            std::make_tuple(static_cast< CommonAPI::EmptyDeployment* >(nullptr)))
        
    {
        CarControlSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0x1005) }, &getIndicatorAttributeStubDispatcher );
        CarControlSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0x1069) }, &getGearAttributeStubDispatcher );
        CarControlSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0x1068) }, &gearSelectionHeadUnitStubDispatcher );
        std::shared_ptr<CommonAPI::SomeIP::ClientId> itsClient = std::make_shared<CommonAPI::SomeIP::ClientId>();

        // Provided events/fields
        if (_stub->hasElement(0)) {
            std::set<CommonAPI::SomeIP::eventgroup_id_t> itsEventGroups;
            itsEventGroups.insert(CommonAPI::SomeIP::eventgroup_id_t(CommonAPI::SomeIP::eventgroup_id_t(0x1004)));
            CommonAPI::SomeIP::StubAdapter::registerEvent(CommonAPI::SomeIP::event_id_t(0xa028), itsEventGroups, CommonAPI::SomeIP::event_type_e::ET_FIELD, CommonAPI::SomeIP::reliability_type_e::RT_RELIABLE);
            fireIndicatorAttributeChanged(std::dynamic_pointer_cast< ::v0::commonapi::CarControlStub>(_stub)->getIndicatorAttribute(itsClient));
        }

        if (_stub->hasElement(1)) {
            std::set<CommonAPI::SomeIP::eventgroup_id_t> itsEventGroups;
            itsEventGroups.insert(CommonAPI::SomeIP::eventgroup_id_t(CommonAPI::SomeIP::eventgroup_id_t(0x1068)));
            CommonAPI::SomeIP::StubAdapter::registerEvent(CommonAPI::SomeIP::event_id_t(0xa410), itsEventGroups, CommonAPI::SomeIP::event_type_e::ET_FIELD, CommonAPI::SomeIP::reliability_type_e::RT_RELIABLE);
            fireGearAttributeChanged(std::dynamic_pointer_cast< ::v0::commonapi::CarControlStub>(_stub)->getGearAttribute(itsClient));
        }

    }

    // Register/Unregister event handlers for selective broadcasts
    void registerSelectiveEventHandlers();
    void unregisterSelectiveEventHandlers();

};

template <typename _Stub, typename... _Stubs>
void CarControlSomeIPStubAdapterInternal<_Stub, _Stubs...>::fireIndicatorAttributeChanged(const std::string &_value) {
    CommonAPI::Deployable< std::string, CommonAPI::SomeIP::StringDeployment> deployedValue(_value, static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr));
    CommonAPI::SomeIP::StubEventHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                std::string,
                CommonAPI::SomeIP::StringDeployment
            >
            >
    >::sendEvent(
        *this,
        CommonAPI::SomeIP::event_id_t(0xa028),
        false,
        deployedValue
    );
}

template <typename _Stub, typename... _Stubs>
void CarControlSomeIPStubAdapterInternal<_Stub, _Stubs...>::fireGearAttributeChanged(const std::string &_value) {
    CommonAPI::Deployable< std::string, CommonAPI::SomeIP::StringDeployment> deployedValue(_value, static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr));
    CommonAPI::SomeIP::StubEventHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                std::string,
                CommonAPI::SomeIP::StringDeployment
            >
            >
    >::sendEvent(
        *this,
        CommonAPI::SomeIP::event_id_t(0xa410),
        false,
        deployedValue
    );
}


template <typename _Stub, typename... _Stubs>
void CarControlSomeIPStubAdapterInternal<_Stub, _Stubs...>::registerSelectiveEventHandlers() {

}

template <typename _Stub, typename... _Stubs>
void CarControlSomeIPStubAdapterInternal<_Stub, _Stubs...>::unregisterSelectiveEventHandlers() {

}

template <typename _Stub = ::v0::commonapi::CarControlStub, typename... _Stubs>
class CarControlSomeIPStubAdapter
    : public CarControlSomeIPStubAdapterInternal<_Stub, _Stubs...> {
public:
    CarControlSomeIPStubAdapter(const CommonAPI::SomeIP::Address &_address,
                                            const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection,
                                            const std::shared_ptr<CommonAPI::StubBase> &_stub)
        : CommonAPI::SomeIP::StubAdapter(_address, _connection),
          CarControlSomeIPStubAdapterInternal<_Stub, _Stubs...>(_address, _connection, _stub) {
    }
};

} // namespace commonapi
} // namespace v0

#endif // V0_COMMONAPI_Car_Control_SOMEIP_STUB_ADAPTER_HPP_
