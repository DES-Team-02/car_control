/*
 * This file was generated by the CommonAPI Generators.
 * Used org.genivi.commonapi.someip 3.2.14.v202310241606.
 * Used org.franca.core 0.13.1.201807231814.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
 * If a copy of the MPL was not distributed with this file, You can obtain one at
 * http://mozilla.org/MPL/2.0/.
 */
#include <v0/commonapi/CarControlSomeIPProxy.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#define HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif

#include <CommonAPI/SomeIP/AddressTranslator.hpp>

#if defined (HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE)
#undef COMMONAPI_INTERNAL_COMPILATION
#undef HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif

namespace v0 {
namespace commonapi {

std::shared_ptr<CommonAPI::SomeIP::Proxy> createCarControlSomeIPProxy(
    const CommonAPI::SomeIP::Address &_address,
    const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection) {
    return std::make_shared< CarControlSomeIPProxy>(_address, _connection);
}

void initializeCarControlSomeIPProxy() {
    CommonAPI::SomeIP::AddressTranslator::get()->insert(
        "local:commonapi.CarControl:v0_1:commonapi.CarControl",
        0xfa0, 0xfa1, 0, 1);
    CommonAPI::SomeIP::Factory::get()->registerProxyCreateMethod(
        "commonapi.CarControl:v0_1",
        &createCarControlSomeIPProxy);
}

INITIALIZER(registerCarControlSomeIPProxy) {
    CommonAPI::SomeIP::Factory::get()->registerInterface(initializeCarControlSomeIPProxy);
}

CarControlSomeIPProxy::CarControlSomeIPProxy(
    const CommonAPI::SomeIP::Address &_address,
    const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection)
        : CommonAPI::SomeIP::Proxy(_address, _connection),
          indicator_(*this, CommonAPI::SomeIP::eventgroup_id_t(0x1004), CommonAPI::SomeIP::event_id_t(0xa028), CommonAPI::SomeIP::method_id_t(0x1005), true, CommonAPI::SomeIP::reliability_type_e::RT_RELIABLE, false, static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr)),
          gear_(*this, CommonAPI::SomeIP::eventgroup_id_t(0x1068), CommonAPI::SomeIP::event_id_t(0xa410), CommonAPI::SomeIP::method_id_t(0x1069), true, CommonAPI::SomeIP::reliability_type_e::RT_RELIABLE, false, static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr))
{
}

CarControlSomeIPProxy::~CarControlSomeIPProxy() {
}

CarControlSomeIPProxy::IndicatorAttribute& CarControlSomeIPProxy::getIndicatorAttribute() {
    return indicator_;
}
CarControlSomeIPProxy::GearAttribute& CarControlSomeIPProxy::getGearAttribute() {
    return gear_;
}


void CarControlSomeIPProxy::gearSelectionHeadUnit(std::string _selectedGear, CommonAPI::CallStatus &_internalCallStatus, bool &_accepte, const CommonAPI::CallInfo *_info) {
    CommonAPI::Deployable< std::string, CommonAPI::SomeIP::StringDeployment> deploy_selectedGear(_selectedGear, &::v0::commonapi::CarControl_::gearSelectionHeadUnit_selectedGearDeployment);
    CommonAPI::Deployable< bool, CommonAPI::EmptyDeployment> deploy_accepte(static_cast< CommonAPI::EmptyDeployment* >(nullptr));
    CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                std::string,
                CommonAPI::SomeIP::StringDeployment
            >
        >,
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                bool,
                CommonAPI::EmptyDeployment
            >
        >
    >::callMethodWithReply(
        *this,
        CommonAPI::SomeIP::method_id_t(0x1068),
        true,
        false,
        (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
        deploy_selectedGear,
        _internalCallStatus,
        deploy_accepte);
    _accepte = deploy_accepte.getValue();
}

std::future<CommonAPI::CallStatus> CarControlSomeIPProxy::gearSelectionHeadUnitAsync(const std::string &_selectedGear, GearSelectionHeadUnitAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    CommonAPI::Deployable< std::string, CommonAPI::SomeIP::StringDeployment> deploy_selectedGear(_selectedGear, &::v0::commonapi::CarControl_::gearSelectionHeadUnit_selectedGearDeployment);
    CommonAPI::Deployable< bool, CommonAPI::EmptyDeployment> deploy_accepte(static_cast< CommonAPI::EmptyDeployment* >(nullptr));
    return CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                std::string,
                CommonAPI::SomeIP::StringDeployment
            >
        >,
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                bool,
                CommonAPI::EmptyDeployment
            >
        >
    >::callMethodAsync(
        *this,
        CommonAPI::SomeIP::method_id_t(0x1068),
        true,
        false,
        (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
        deploy_selectedGear,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable< bool, CommonAPI::EmptyDeployment > _accepte) {
            if (_callback)
                _callback(_internalCallStatus, _accepte.getValue());
        },
        std::make_tuple(deploy_accepte));
}

void CarControlSomeIPProxy::getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const {
    ownVersionMajor = 0;
    ownVersionMinor = 1;
}

std::future<void> CarControlSomeIPProxy::getCompletionFuture() {
    return CommonAPI::SomeIP::Proxy::getCompletionFuture();
}

} // namespace commonapi
} // namespace v0
