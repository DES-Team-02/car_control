/*
 * This file was generated by the CommonAPI Generators.
 * Used org.genivi.commonapi.someip 3.2.14.v202310241606.
 * Used org.franca.core 0.13.1.201807231814.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
 * If a copy of the MPL was not distributed with this file, You can obtain one at
 * http://mozilla.org/MPL/2.0/.
 */
#ifndef V0_COMMONAPI_JETSON_SOMEIP_STUB_ADAPTER_HPP_
#define V0_COMMONAPI_JETSON_SOMEIP_STUB_ADAPTER_HPP_

#include <v0/commonapi/JetsonStub.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#define HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif

#include <CommonAPI/SomeIP/AddressTranslator.hpp>
#include <CommonAPI/SomeIP/StubAdapterHelper.hpp>
#include <CommonAPI/SomeIP/StubAdapter.hpp>
#include <CommonAPI/SomeIP/Factory.hpp>
#include <CommonAPI/SomeIP/Types.hpp>
#include <CommonAPI/SomeIP/Constants.hpp>

#if defined (HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE)
#undef COMMONAPI_INTERNAL_COMPILATION
#undef HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif

namespace v0 {
namespace commonapi {

template <typename _Stub = ::v0::commonapi::JetsonStub, typename... _Stubs>
class JetsonSomeIPStubAdapterInternal
    : public virtual JetsonStubAdapter,
      public CommonAPI::SomeIP::StubAdapterHelper< _Stub, _Stubs...>,
      public std::enable_shared_from_this< JetsonSomeIPStubAdapterInternal<_Stub, _Stubs...>>
{
public:
    typedef CommonAPI::SomeIP::StubAdapterHelper< _Stub, _Stubs...> JetsonSomeIPStubAdapterHelper;

    ~JetsonSomeIPStubAdapterInternal() {
        deactivateManagedInstances();
        JetsonSomeIPStubAdapterHelper::deinit();
    }

    void fireSteeringAttributeChanged(const double &_value);
    
    void fireThrottleAttributeChanged(const double &_value);
    
    void deactivateManagedInstances() {}
    
    CommonAPI::SomeIP::GetAttributeStubDispatcher<
        ::v0::commonapi::JetsonStub,
        CommonAPI::Version
    > getJetsonInterfaceVersionStubDispatcher;

    CommonAPI::SomeIP::GetAttributeStubDispatcher<
        ::v0::commonapi::JetsonStub,
        double
    > getSteeringAttributeStubDispatcher;
    
    CommonAPI::SomeIP::GetAttributeStubDispatcher<
        ::v0::commonapi::JetsonStub,
        double
    > getThrottleAttributeStubDispatcher;
    
    JetsonSomeIPStubAdapterInternal(
        const CommonAPI::SomeIP::Address &_address,
        const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection,
        const std::shared_ptr<CommonAPI::StubBase> &_stub):
        CommonAPI::SomeIP::StubAdapter(_address, _connection),
        JetsonSomeIPStubAdapterHelper(
            _address,
            _connection,
            std::dynamic_pointer_cast< JetsonStub>(_stub)),
        getJetsonInterfaceVersionStubDispatcher(&JetsonStub::lockInterfaceVersionAttribute, &JetsonStub::getInterfaceVersion, false, true),
        getSteeringAttributeStubDispatcher(
            &::v0::commonapi::JetsonStub::lockSteeringAttribute,
            &::v0::commonapi::JetsonStub::getSteeringAttribute,
            false,
            _stub->hasElement(0))
        ,
        getThrottleAttributeStubDispatcher(
            &::v0::commonapi::JetsonStub::lockThrottleAttribute,
            &::v0::commonapi::JetsonStub::getThrottleAttribute,
            false,
            _stub->hasElement(1))
    {
        JetsonSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0xfa0) }, &getSteeringAttributeStubDispatcher );
        JetsonSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0x1005) }, &getThrottleAttributeStubDispatcher );
        std::shared_ptr<CommonAPI::SomeIP::ClientId> itsClient = std::make_shared<CommonAPI::SomeIP::ClientId>();

        // Provided events/fields
        if (_stub->hasElement(0)) {
            std::set<CommonAPI::SomeIP::eventgroup_id_t> itsEventGroups;
            itsEventGroups.insert(CommonAPI::SomeIP::eventgroup_id_t(CommonAPI::SomeIP::eventgroup_id_t(0x8110)));
            CommonAPI::SomeIP::StubAdapter::registerEvent(CommonAPI::SomeIP::event_id_t(0x8110), itsEventGroups, CommonAPI::SomeIP::event_type_e::ET_FIELD, CommonAPI::SomeIP::reliability_type_e::RT_RELIABLE);
            fireSteeringAttributeChanged(std::dynamic_pointer_cast< ::v0::commonapi::JetsonStub>(_stub)->getSteeringAttribute(itsClient));
        }

        if (_stub->hasElement(1)) {
            std::set<CommonAPI::SomeIP::eventgroup_id_t> itsEventGroups;
            itsEventGroups.insert(CommonAPI::SomeIP::eventgroup_id_t(CommonAPI::SomeIP::eventgroup_id_t(0x8111)));
            CommonAPI::SomeIP::StubAdapter::registerEvent(CommonAPI::SomeIP::event_id_t(0x8111), itsEventGroups, CommonAPI::SomeIP::event_type_e::ET_FIELD, CommonAPI::SomeIP::reliability_type_e::RT_RELIABLE);
            fireThrottleAttributeChanged(std::dynamic_pointer_cast< ::v0::commonapi::JetsonStub>(_stub)->getThrottleAttribute(itsClient));
        }

    }

    // Register/Unregister event handlers for selective broadcasts
    void registerSelectiveEventHandlers();
    void unregisterSelectiveEventHandlers();

};

template <typename _Stub, typename... _Stubs>
void JetsonSomeIPStubAdapterInternal<_Stub, _Stubs...>::fireSteeringAttributeChanged(const double &_value) {
    CommonAPI::SomeIP::StubEventHelper<
        CommonAPI::SomeIP::SerializableArguments<
            double
            >
    >::sendEvent(
        *this,
        CommonAPI::SomeIP::event_id_t(0x8110),
        false,
        _value
    );
}

template <typename _Stub, typename... _Stubs>
void JetsonSomeIPStubAdapterInternal<_Stub, _Stubs...>::fireThrottleAttributeChanged(const double &_value) {
    CommonAPI::SomeIP::StubEventHelper<
        CommonAPI::SomeIP::SerializableArguments<
            double
            >
    >::sendEvent(
        *this,
        CommonAPI::SomeIP::event_id_t(0x8111),
        false,
        _value
    );
}


template <typename _Stub, typename... _Stubs>
void JetsonSomeIPStubAdapterInternal<_Stub, _Stubs...>::registerSelectiveEventHandlers() {

}

template <typename _Stub, typename... _Stubs>
void JetsonSomeIPStubAdapterInternal<_Stub, _Stubs...>::unregisterSelectiveEventHandlers() {

}

template <typename _Stub = ::v0::commonapi::JetsonStub, typename... _Stubs>
class JetsonSomeIPStubAdapter
    : public JetsonSomeIPStubAdapterInternal<_Stub, _Stubs...> {
public:
    JetsonSomeIPStubAdapter(const CommonAPI::SomeIP::Address &_address,
                                            const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection,
                                            const std::shared_ptr<CommonAPI::StubBase> &_stub)
        : CommonAPI::SomeIP::StubAdapter(_address, _connection),
          JetsonSomeIPStubAdapterInternal<_Stub, _Stubs...>(_address, _connection, _stub) {
    }
};

} // namespace commonapi
} // namespace v0

#endif // V0_COMMONAPI_Jetson_SOMEIP_STUB_ADAPTER_HPP_
